// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc329.beta20191;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.cscore.VideoMode.PixelFormat;
import edu.wpi.first.cameraserver.CameraServer;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoDoNothing;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoLeftHab1NearRocket;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoLeftHab1FrontShip;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoLeftHab2SideShip;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoRightHab1FrontShip;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoRightHab1SideShip;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoRightHab2FrontShip;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoRightHab2SideShip;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoHab1Moving;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoRightHab1NearRocket;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoStraightHab1FrontShip;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoLeftHab2NearRocket;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoHab2Moving;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoRightHab2NearRocket;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoLeftHab1SideShip;
import org.usfirst.frc329.beta20191.commands.autonomouscommands.AutoLeftHab2FrontShip;
import org.usfirst.frc329.beta20191.subsystems.*;
import edu.wpi.first.wpilibj.Timer;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    //SendableChooser<Command> chooser = new SendableChooser<>();
    
    SendableChooser<String> locChooser = new SendableChooser<>();
    SendableChooser<String> habChooser = new SendableChooser<>();
    SendableChooser<String> destChooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static sDrive sDrive;
    public static sClimb sClimb;
    public static sPneu  sPneu;
    public static sPi sPi;
    public static sPIDElevator sPIDEl;
    public static sPIDTurner sPIDTurner;
    public static sPIDDrive sPIDDrive;
    public static Timer commandTimer;
    public static double piHeartbeat;
    static double maxRight, maxLeft;
    public static double climbStartPitch;

    public void robotInit() {

        sClimb = new sClimb();
        sDrive = new sDrive();
        sPIDEl = new sPIDElevator();
        sPIDTurner = new sPIDTurner();
        sPIDDrive = new sPIDDrive();
        sPneu  = new sPneu(); //comment out when pneu not in use or will receive CAN error
        sPi = new sPi();
        commandTimer = new Timer();
        oi = new OI();  //  Must be instantiated after all subsystems are instantiated

        /*chooser.setDefaultOption("Do Nothing", new AutoDoNothing()); // DONE-TESTED
        chooser.addOption("Left Hab 1 Front Ship", new AutoLeftHab1FrontShip()); //DONE-TESTED
        chooser.addOption("Left Hab 1 Side Ship", new AutoLeftHab1SideShip()); //DONE-TESTED
        chooser.addOption("Left Hab 1 Near Rocket", new AutoLeftHab1NearRocket()); //DONE-TESTED 
        chooser.addOption("Left Hab 2 Front Ship", new AutoLeftHab2FrontShip()); //COPIED FROM HAB 1 C-CLAMPS
        chooser.addOption("Left Hab 2 Side Ship", new AutoLeftHab2SideShip()); //COPIED FROM HAB 1 C-CLAMP
        chooser.addOption("Left Hab 2 Near Rocket", new AutoLeftHab2NearRocket()); //COPIED FROM HAB 1 C-CLAMP
        chooser.addOption("Right Hab 1 Front Ship", new AutoRightHab1FrontShip()); //ALMOST DONE-TESTED
        chooser.addOption("Right Hab 1 Side Ship", new AutoRightHab1SideShip()); //DONE-TESTED
        chooser.addOption("Right Hab 1 Near Rocket", new AutoRightHab1NearRocket()); //DONE-TESTED
        chooser.addOption("Right Hab 2 Front Ship", new AutoRightHab2FrontShip());  
        chooser.addOption("Right Hab 2 Side Ship", new AutoRightHab2SideShip());
        chooser.addOption("Right Hab 2 Near Rocket", new AutoRightHab2NearRocket());
        chooser.addOption("Straight Front Ship", new AutoStraightHab1FrontShip()); //DONE-TESTED 
        chooser.addOption("Hab 1 drive straight", new AutoHab1Moving()); //DONE-TESTED
        chooser.addOption("Hab 2 drive straight", new AutoHab2Moving()); //DONE-TESTED*/

        locChooser.setDefaultOption("Left", "left");
        locChooser.addOption("right", "right");
        locChooser.addOption("straight", "straight");

        habChooser.setDefaultOption("hab1", "hab1");
        habChooser.addOption("hab2", "hab2");

        destChooser.setDefaultOption("rocket", "rocket");
        destChooser.addOption("cargoSide", "cargoSide");
        destChooser.addOption("frontShip", "frontShip");
        destChooser.addOption("doNothing", "doNothing");
        destChooser.addOption("driving", "driving");

        //SmartDashboard.putData("Pick Auto mode", chooser);
        SmartDashboard.putData("Pick Starting Location", locChooser);
        SmartDashboard.putData("Pick Habitat", habChooser);
        SmartDashboard.putData("Pick Destination", destChooser);
        SmartDashboard.putNumber("P", 0.1);  //.125
        SmartDashboard.putNumber("I", 0);
        SmartDashboard.putNumber("D", 0.15);  //.11
        SmartDashboard.putNumber("F", 0);  //.11288
                
        //CameraServer.getInstance().startAutomaticCapture();
        // USE THE LINE BELOW !!!!!!!!
        CameraServer.getInstance().startAutomaticCapture().setVideoMode(PixelFormat.kMJPEG, 320, 240, 20);
        //camera = CameraServer.getInstance(); // ignore deprecate
        //camera.startAutomaticCapture();
        //camera.startAutomaticCapture().setResolution(320, 240);
        //camera.startAutomaticCapture().setFPS(20);
        //CameraServer.getInstance().
        sDrive.setExpiration();
        sDrive.resetYaw();


    }

    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        autoSelection();
        //autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        sDrive.watchdogOff();  // Ensure Canine mortality
        if (autonomousCommand != null){
            autonomousCommand.start();
            System.out.println("------>      Auto = " + autonomousCommand.getName());
        } 
        else System.out.println("Auto Failed");
        
    }


    public void autonomousPeriodic() {
        if (autonomousCommand != null) autonomousCommand.cancel();  //never do autonomous command, killAuto
        /*if(oi.killAuto.get() == true) { 
            if (autonomousCommand != null) autonomousCommand.cancel();
        }*/
        Scheduler.getInstance().run();
        printTelemetry();
    }

    @Override
    public void teleopInit() {

        if (autonomousCommand != null) autonomousCommand.cancel();
        //sDrive.setExpiration();  //Re-animate Canine
        maxRight = 0;
        maxLeft = 0;
    }

    @Override
    public void teleopPeriodic() {
        int counter = 0;
        Scheduler.getInstance().run();
        if(counter++ % 5 == 0)
            printTelemetry();
    }

    public void autoSelection(){
        String loc = locChooser.getSelected();
        String hab = habChooser.getSelected();
        String dest = destChooser.getSelected();
        if(dest == "doNothing")
            autonomousCommand = new AutoDoNothing();
        else if(loc == "left"){
            if(hab == "hab1"){
                if(dest == "rocket")
                    autonomousCommand = new AutoLeftHab1NearRocket();
                else if(dest == "cargoSide")
                    autonomousCommand = new AutoLeftHab1SideShip();
                else if(dest == "frontShip")
                    autonomousCommand = new AutoLeftHab1FrontShip();
                else if(dest == "driving")
                    autonomousCommand = new AutoHab1Moving();
            }
            else if(hab == "hab2"){
                if(dest == "rocket")
                    autonomousCommand = new AutoLeftHab2NearRocket();
                else if(dest == "cargoSide")
                    autonomousCommand = new AutoLeftHab2SideShip();
                else if(dest == "frontShip")
                    autonomousCommand = new AutoLeftHab2FrontShip();
                else if(dest == "driving")
                    autonomousCommand = new AutoHab2Moving();  
            }
        }
        else if(loc == "right"){
            if(hab == "hab1"){
                if(dest == "rocket")
                    autonomousCommand = new AutoRightHab1NearRocket();
                else if(dest == "cargoSide")
                    autonomousCommand = new AutoRightHab1SideShip();
                else if(dest == "frontShip")
                    autonomousCommand = new AutoRightHab1FrontShip();
                else if(dest == "driving")
                    autonomousCommand = new AutoHab1Moving();
            }
            else if(hab == "hab2"){
                if(dest == "rocket")
                    autonomousCommand = new AutoRightHab2NearRocket();
                else if(dest == "cargoSide")
                    autonomousCommand = new AutoRightHab2SideShip();
                else if(dest == "frontShip")
                    autonomousCommand = new AutoRightHab2FrontShip();
                else if(dest == "driving")
                    autonomousCommand = new AutoHab2Moving();  
            }
        }
        else if(loc == "straight"){
            autonomousCommand = new AutoStraightHab1FrontShip(); 
        }
       System.out.println("hab is :" + hab + ":  loc is :" + loc + ":  dest is :" + dest + ":");
    }

    public void printTelemetry(){
        //double ourDist = 0.0, ourTurnAng = 0.0, ourTryAgain = 0.0;
        double vel;
        SmartDashboard.putBoolean("See Target", sPi.getSeeAngle());
        SmartDashboard.putBoolean("at bottom", sPIDEl.atBottom());
        SmartDashboard.putBoolean("Front edge", sClimb.frontOverTheEdge());
        SmartDashboard.putBoolean("Back edge", sClimb.backOverTheEdge());
        SmartDashboard.putBoolean("Front height", sClimb.climbHighEnough());
        SmartDashboard.putBoolean("Front Leg High Enough", sClimb.frontLegHighEnough());
        SmartDashboard.putBoolean("Back Leg High Enough", sClimb.backLegHighEnough());
        SmartDashboard.putNumber("Yaw", sDrive.getYaw());
        SmartDashboard.putNumber("Pitch", sDrive.getPitch());
        SmartDashboard.putNumber("Roll", sDrive.getRoll());
        SmartDashboard.putNumber("R Dist", sDrive.getDistance());
        vel = sDrive.getVelocity()/12;
        if(vel > maxRight) maxRight = vel;
        SmartDashboard.putNumber("R Vel", vel);
        SmartDashboard.putNumber("R Max Vel", maxRight);
        //SmartDashboard.putNumber("Drive Speed Divisor",sDrive.getDivisor());
        //SmartDashboard.putNumber("Left Slider", oi.joystickLeft.getRawAxis(3));
        SmartDashboard.putBoolean("PiRunning", Robot.sPi.piRunning());
        SmartDashboard.putNumber("L Dist", sDrive.getLeftDistance());
        vel = sDrive.getLeftVelocity()/12;
        if(vel > maxLeft) maxLeft = vel;
        SmartDashboard.putNumber("L Vel", vel);
        SmartDashboard.putNumber("L Max Vel", maxLeft);
        SmartDashboard.putNumber("Elevator Ht", sPIDEl.getHeight());
        SmartDashboard.putBoolean("Bottom L/S", sPIDEl.atBottom());
        SmartDashboard.putBoolean("Auto PI Driving Okay", sDrive.piSDDOkay);
        SmartDashboard.putBoolean("Turn Right", sPi.getTurnRight());
        SmartDashboard.putBoolean("Turn Left", sPi.getTurnLeft());

        //SmartDashboard.putBoolean("Kill Auto", oi.killAuto.get());
         /*ourDist = SmartDashboard.getNumber("dist", ourDist);
        ourTurnAng = SmartDashboard.getNumber("turnAng", ourTurnAng);
        ourTryAgain = SmartDashboard.getNumber("tryAgain", ourTryAgain);
        System.out.println("ourDist = " + ourDist);
        System.out.println("ourTurnAng = " + ourTurnAng);
        System.out.println("ourTryAgain = " + ourTryAgain);*/
    }
}
